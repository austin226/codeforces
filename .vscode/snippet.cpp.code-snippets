{
	// Place your codeforces workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// Generated with https://snippet-generator.app/
	"codeforces-c++-snippet": {
	"prefix": "codeforces-cpp",
	"body": [
		"#include <algorithm>",
		"#include <cctype>",
		"#include <cmath>",
		"#include <iostream>",
		"#include <map>",
		"#include <memory>",
		"#include <set>",
		"#include <sstream>",
		"#include <string>",
		"#include <vector>",
		"",
		"using namespace std;",
		"",
		"void remove_leading(string &input, const char char_to_remove) {",
		"  input.erase(",
		"      0, std::min(input.find_first_not_of(char_to_remove), input.size() - 1));",
		"}",
		"",
		"void remove_trailing(string &input, const char char_to_remove) {",
		"  input.erase(input.find_last_not_of(char_to_remove) + 1, string::npos);",
		"}",
		"",
		"int main() {",
		"  $0",
		"}"
	],
	"description": "codeforces-c++-snippet"
	}
}